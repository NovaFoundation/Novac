package "novex/novac"

import "nova/datastruct/HashMap"
import "nova/datastruct/ImmutableHashMap"

import "novex/astro/Astro"
import "novex/astro/tree/SyntaxTree"
import "novex/spectra/Spectra"

class Novac {
    visible final immutable String[] ARGS
    
    visible immutable String[] directoryLocations
    
    visible Astro astro
    visible SyntaxTree tree
    visible Bool typeValidationSuccess
    
    visible immutable HashMap<String, Bool> flags
    
    public static main(String[] args) {
        let compiler = new Novac(args)
        
        compiler.tree = compiler.buildTree()
        compiler.typeValidationSuccess = compiler.validateTypes()
        
        if (!compiler.typeValidationSuccess) {
            Console.log("Type validation failed")
        }
        
        compiler.optimizeTree()
        compiler.linkTree()
        
        let sortedCompileTimes = compiler.tree.compileTimes.toArray().sort({ _.value - _.value })
        
        let fileCount = "#sortedCompileTimes.count files"
        
        Console.log("============================= #fileCount =============================")
        
        for (pair in sortedCompileTimes) {
            Console.log("#pair.key: #{pair.value}ms")
        }
        
        Console.writeLine()
        Console.write("Average file parse time: \n")
        // var Int sum = sortedCompileTimes.reduce<Int>({ _.value + _.value }, 0)
        
        var Int sum = sortedCompileTimes.sum({ _.value })
        // Console.writeLine(sortedCompileTimes.count > 0 ? sum / sortedCompileTimes.count : 0)
        Console.writeLine("#{sortedCompileTimes.count > 0 ? sum / sortedCompileTimes.count : 0}ms")
        
        
        
        // Console.log("=============================#{'='.repeat(fileCount.count + 2)}=============================")
        Console.log("=============================#{"=".repeat(fileCount.count + 2)}=============================")
        
        Console.waitForEnter()
    }
    
    public construct(String[] args) {
        ARGS = args.skip(1)
        
        let map = new HashMap<String, Bool>()
        
        // map["single-thread"] = true
        
        flags = map.toImmutable()
        
        directoryLocations = ARGS
    }
    
    public buildTree() -> SyntaxTree {
        astro = new Astro(this)
        
        return astro.build()
    }
    
    public validateTypes() -> Bool {
        let spectra = new Spectra()
        
        let valid = spectra.validate(tree)
        
        return valid
    }
    
    public optimizeTree() {
        
    }
    
    public linkTree() {
        
    }
}