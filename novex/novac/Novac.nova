package "novex/novac"

import "nova/datastruct/HashMap"
import "nova/datastruct/ImmutableHashMap"

import "novex/astro/Astro"
import "novex/astro/tree/SyntaxTree"
import "novex/spectra/Spectra"

class Novac {
    visible final immutable HashMap<String, Object> ARGS
    
    visible immutable String[] directoryLocations
    
    visible Astro astro
    visible SyntaxTree tree
    visible Bool typeValidationSuccess
    
    visible immutable HashMap<String, Bool> flags
    
    public static main(String[] args) {
        let compiler = new Novac(args)
        
        compiler.tree = compiler.buildTree()
        compiler.typeValidationSuccess = compiler.validateTypes()
        
        if (!compiler.typeValidationSuccess) {
            Console.log("Type validation failed")
        }
        
        compiler.optimizeTree()
        compiler.linkTree()
        
        let sortedCompileTimes = compiler.tree.compileTimes.toArray().sort({ _.value - _.value })
        
        let fileCount = "#sortedCompileTimes.count files"
        
        Console.log("============================= #fileCount =============================")
        
        for (pair in sortedCompileTimes) {
            Console.log("#pair.key: #{pair.value}ms")
        }
        
        Console.writeLine()
        Console.write("Average file parse time: ")
        // var Int sum = sortedCompileTimes.reduce<Int>({ _.value + _.value }, 0)
        
        var Int sum = sortedCompileTimes.sum({ _.value })
        // Console.writeLine(sortedCompileTimes.count > 0 ? sum / sortedCompileTimes.count : 0)
        Console.writeLine("#{sortedCompileTimes.count > 0 ? sum / sortedCompileTimes.count : 0}ms")
        
        
        
        // Console.log("=============================#{'='.repeat(fileCount.count + 2)}=============================")
        Console.log("=============================#{"=".repeat(fileCount.count + 2)}=============================")
        
        Console.waitForEnter()
    }
    
    public construct(String[] args) {
        let argsMap = new HashMap<String, Object>()
        let flags = new HashMap<String, Bool>()
        
        var readingInput = true
        var String pendingValue
        
        let directoryLocations = new String[]
        
        argsMap["input"] = "nova"
        
        for (arg in args.skip(1)) {
            if (pendingValue) {
                argsMap[pendingValue] = arg
                pendingValue = null
            } else {
                var foundArg = true
                
                match (arg) {
                    "-input" =>
                    "-i" =>
                        pendingValue = "input"
                    "--single-thread" =>
                    "-sync" =>
                        flags["single-thread"] = true
                    default => {
                        foundArg = false
                        
                        if (readingInput) {
                            directoryLocations.add(arg)
                        } else {
                            Console.log("Invalid argument '#arg'")
                            System.exit(1)
                        }
                    }
                }
                
                if (foundArg) {
                    readingInput = false
                }
            }
        }
        
        ARGS = argsMap.toImmutable()
        
        this.flags = flags.toImmutable()
        this.directoryLocations = directoryLocations.toImmutable()
    }
    
    public buildTree() -> SyntaxTree {
        astro = new Astro(this)
        
        return astro.build()
    }
    
    public validateTypes() -> Bool {
        let spectra = new Spectra()
        
        let valid = spectra.validate(tree)
        
        return valid
    }
    
    public optimizeTree() {
        
    }
    
    public linkTree() {
        
    }
}